{"version":3,"sources":["daasApp/component/Header/index.tsx","daasApp/apis.ts","daasApp/component/DataCard/index.tsx","daasApp/component/Main/index.tsx","daasApp/App.tsx","reportWebVitals.ts","index.tsx"],"names":["TextBase","props","Container","Row","className","Col","md","Jumbotron","title","text","children","Header","Footer","instance","axios","create","baseURL","timeout","headers","getClouds","a","get","response","data","clouds","DataCard","Card","border","style","width","Body","Title","cloud_name","Subtitle","geo_region","Text","cloud_description","geo_latitude","geo_longitude","Main","useState","results","setResults","filter","setFilter","regions","setRegions","providers","setProviders","searchBox","useRef","currentRegionFilter","setCurrentRegionFilter","currentProviderFilter","setCurrentProviderFilter","nwCall","useEffect","reduce","accumulator","item","key","indexOf","push","acc","first","split","Alert","variant","Badge","length","ref","type","name","placeholder","onChange","e","searchTerm","target","value","pattern","RegExp","test","Button","onClick","current","Dropdown","Toggle","Menu","map","Item","region","provider","fluid","noGutters","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f6ed4cb.chunk.js","sourcesContent":["import React, { ReactElement } from 'react'\nimport {\n  Row, Col,\n  Container,\n  Jumbotron,\n} from 'react-bootstrap';\n\ninterface IdefaultProps {\n  title?: string,\n  text: string,\n  children?: ReactElement<any>,\n}\n\nexport const TextBase = (props: IdefaultProps) => {\n  return (\n    <header>\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col md=\"auto\">\n            <Jumbotron >\n              {(props.title) && <h1>{props.title}</h1>}\n              {(props.text) && <p>{props.text}</p>}\n              {(props.children) && <p>{props.children}</p>}\n            </Jumbotron>\n          </Col>\n        </Row>\n      </Container>\n    </header>\n  )\n}\n\nexport const Header = (props: IdefaultProps) => {\n  return (\n    <header>\n      <TextBase {...props} />\n    </header>\n  )\n}\n\nexport const Footer = () => (\n  <footer>\n    <br></br>\n    <TextBase text=\"Made with love using react by avi\" />\n  </footer>\n)\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.aiven.io/v1',\n  timeout: 2000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport interface ICloudItem {\n  cloud_description: string\n  cloud_name: string,\n  geo_latitude: number,\n  geo_longitude: number,\n  geo_region: string,\n}\n\nexport const getClouds = async () => {\n  const response = await instance.get('/clouds')\n  return response.data.clouds\n}\n","import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport { ICloudItem } from '../../apis'\n\nexport const DataCard = (props: ICloudItem) => {\n  return (\n    <Card key={props.cloud_name} border=\"dark\" style={{ width: \"50%\" }}>\n      <Card.Body>\n        <Card.Title>{props.cloud_name}</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">{props.geo_region}</Card.Subtitle>\n        <Card.Text>{props.cloud_description}</Card.Text>\n        <Card.Text>Lattitide={props.geo_latitude} <br></br>Longitude={props.geo_longitude}</Card.Text>\n      </Card.Body>\n    </Card >\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getClouds, ICloudItem } from '../../apis'\nimport { DataCard } from '../DataCard'\nimport {\n  Row,\n  Col,\n  Button,\n  Container,\n  Badge,\n  Alert,\n  Dropdown,\n} from 'react-bootstrap';\n\n\nexport const Main = () => {\n  const [results, setResults] = useState<ICloudItem[]>([])\n  const [filter, setFilter] = useState<ICloudItem[]>(results)\n  const [regions, setRegions] = useState<string[]>([])\n  const [providers, setProviders] = useState<string[]>([])\n  const searchBox = useRef<HTMLInputElement>(null)\n  const [currentRegionFilter, setCurrentRegionFilter] = useState<string>('')\n  const [currentProviderFilter, setCurrentProviderFilter] = useState<string>('')\n\n  const nwCall = async () => {\n    const results = await getClouds()\n    setResults(results)\n    setFilter(results)\n  }\n\n  // full text search\n  const filterResults: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const searchTerm = e.target.value\n    const pattern = new RegExp(searchTerm, 'i');\n    // console.log(searchTerm)\n    setFilter(filter.filter(item => {\n      if (pattern.test(item.cloud_description) || pattern.test(item.cloud_name)) {\n        return item\n      } else {\n        return null\n      }\n    }))\n  }\n\n  const filterByRegion = (region: string) => {\n    setFilter(results.filter(item => {\n      if (item.geo_region === region) {\n        return item\n      } else { return null }\n    }))\n    setCurrentRegionFilter(region)\n  }\n\n  const filterByProvider = (provider: string) => {\n    setFilter(results.filter(item => {\n      if (item.cloud_name.split('-')[0] === provider) {\n        return item\n      } else { return null }\n    }))\n    setCurrentProviderFilter(provider)\n  }\n\n  const clearSearch = () => {\n    setCurrentRegionFilter('')\n    setCurrentProviderFilter('')\n    if (searchBox && searchBox.current) {\n      setFilter(results)\n      searchBox.current.value = \"\"\n    }\n  }\n\n  // only once when component mounts\n  useEffect(() => {\n    nwCall()\n  }, [])\n\n  useEffect(() => {\n    // unique region list\n    setRegions(results.reduce((accumulator: string[], item) => {\n      const key = item.geo_region\n      if (accumulator.indexOf(key) === -1) {\n        accumulator.push(key)\n      }\n      return accumulator\n    }, []));\n\n    // unique cloud providers\n    setProviders(results.reduce((acc: string[], item) => {\n      let first = item.cloud_name.split('-')[0]\n      if (acc.indexOf(first) === -1) {\n        acc.push(first)\n      }\n      return acc\n    }, []))\n  }, [results])\n\n\n  return (\n    <Container>\n      <main>\n        <Alert variant=\"secondary\">\n          Number of results: <Badge variant=\"primary\">{filter.length}</Badge>\n          <br /><br></br>\n          <Row>\n            <Col md={10}>\n              <input\n                ref={searchBox}\n                type=\"search\"\n                className=\"search\"\n                name=\"filter\"\n                placeholder=\"search\"\n                onChange={filterResults}\n              />\n            </Col>\n            <Col md={2}>\n              <Button onClick={clearSearch} variant=\"outline-danger\">reset all filters</Button>\n            </Col>\n          </Row>\n\n          <br></br>\n          <Row>\n            <Col md={6}>\n              <Dropdown>\n                <Dropdown.Toggle variant=\"outline-secondary\">\n                  <Badge variant=\"primary\">{regions.length}</Badge> Filter byRegions: <strong>{currentRegionFilter}</strong>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  {regions.map(item => (\n                    <Dropdown.Item key={item} onClick={() => filterByRegion(item)}>{item}</Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n            </Col>\n\n            <Col md={6}>\n              <Dropdown>\n                <Dropdown.Toggle variant=\"outline-secondary\">\n                  <Badge variant=\"primary\">{providers.length}</Badge> Filter byCloudProviders: <strong>{currentProviderFilter}</strong>\n                </Dropdown.Toggle>\n                <Dropdown.Menu>\n                  {providers.map(item => (\n                    <Dropdown.Item key={item} onClick={() => filterByProvider(item)}>{item}</Dropdown.Item>\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown>\n            </Col>\n          </Row>\n\n        </Alert>\n\n        {/* <pre>{JSON.stringify(providers, null, 4)}</pre> */}\n\n        <Container fluid={true}>\n          <Row noGutters={false}>\n            {filter.map((item) => (\n              <DataCard key={item.cloud_name} {...item} />\n            ))}\n          </Row>\n        </Container>\n\n      </main>\n    </Container >\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Header, Footer } from './component/Header'\nimport { Main } from './component/Main'\n\nfunction App() {\n  return (\n    <>\n      <Header title=\"DaaS\" text=\"Database as a Service webapp\" />\n      <Main />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './daasApp/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}